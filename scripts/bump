#!/usr/bin/env bash

set -e

root="$(git rev-parse --show-toplevel)"

# Abort if the working tree is dirty
[[ -z "$(git status --porcelain)" ]] || (>&2 echo "Working tree dirty!" && exit 1)

# Prompt for the new version
old_vers=$(ruby -Igem/lib -rpagy -e 'puts Pagy::VERSION')
echo "Current Pagy::VERSION: $old_vers"
read -rp 'Enter the new version> ' new_vers

# Abort if the version is invalid
[[ -n $new_vers ]] || ( >&2 echo 'Missing new version!' && exit 1)
num=$(echo "$new_vers" | grep -o '\.' | wc -l | xargs)
[[ $num == 2 ]] || (>&2 echo 'Incomplete semantic version!' && exit 1)

# Abort if there is no gem change
[[ -n $(git diff --name-only --relative=gem "$old_vers"..HEAD) ]] || \
	(>&2 echo "No gem changes since version $old_vers!" && exit 1)

# Bump the version in files
esc_old_vers=${old_vers//./\\.}
esc_new_vers=${new_vers//./\\.}
for path in \
	"retype.yml" \
	".github/ISSUE_TEMPLATE/Code.yml" \
	".github/latest_release_body.md" \
	"gem/apps/calendar.ru" \
	"gem/apps/demo.ru" \
	"gem/apps/rails.ru" \
	"gem/apps/repro.ru" \
	"gem/bin/pagy" \
	"gem/config/pagy.rb" \
	"gem/lib/pagy.rb" \
	"gem/pagy.gemspec" \
	"src/pagy.ts"
do
	sed -i "0,/$esc_old_vers/{s/$esc_old_vers/$esc_new_vers/}" "$root/$path"
done

# Bumps docs example
esc_old_minor_vers=${esc_old_vers%\\*}
esc_new_minor_vers=${esc_new_vers%\\*}
sed -i "0,/$esc_old_minor_vers/{s/$esc_old_minor_vers/$esc_new_minor_vers/}" "$root/quick-start.md"

# Build javascript files
cd "$root/src"
./build
cd "$root"

# Set tmplog to the commit messages that have changes in the "gem" root path
tmplog=$(mktemp)
# Iterate through the new commits
for commit in $(git rev-list "$old_vers"..HEAD)
do
	if [[ -n $(git show --pretty="format:" --name-only --relative=gem $commit) ]]
	then
		subject=$(git show --no-patch --format="- %s" $commit)
		if [[ $subject != *"[skip-log]"* ]]
		then
			body=$(git show --no-patch --format="%b" $commit)
			if [[ -n "$body" ]]
			then
			  body=$(echo "$body" | awk '{print "  " $0}')
			fi
		    echo -e "${subject}${body}" >> $tmplog
		fi
	fi
done

function edit_doc() {
	doc_name=$1
	doc_path=$2

	echo -e "\n${doc_name}:"
	cat "$doc_path"
	echo
	# Optional edit
	read -rp "Do you want to edit the ${doc_name}? (y/n)> " input
	if [[ $input = y ]] || [[ $input = Y ]]; then
		nano "$doc_path"
	fi
}

edit_doc 'Commit log' "$tmplog"

# Insert the whats_new (from README) and changes in the the release body file
# used by .github/workflows/create_release.yml which is triggered by the :rubygem_release task (push tag)
release_body_path="$root/.github/latest_release_body.md"
### What's New
lead='<!-- whats_new_start -->'
tail='<!-- whats_new_end -->'
#whats_new=$(sed -n "/$lead/,/$tail/p" "$root/README")
whats_new=$(sed -n "/$lead/,/$tail/{//b;p}" "$root/README.md")
gawk -i inplace -v st="$lead" -v et="$tail" -v repl="$whats_new" '
   $0 == st{del=1} $0 == et{$0 = repl; del=0} !del' "$release_body_path"

### Changes
lead='^<!-- changes_start -->$'
tail='^<!-- changes_end -->$'
sed -i "/$lead/,/$tail/{ /$lead/{p; r $tmplog
		}; /$tail/p; d }" "$release_body_path"

edit_doc 'Release body' "$release_body_path"

# Update CHANGELOG
changelog=$(cat <(echo -e "<hr>\n\n## Version $new_vers\n") "$tmplog")
changelog_path="$root/CHANGELOG.md"
awk -v l="$changelog" '{sub(/<hr>/, l); print}' "$changelog_path" > "$tmplog"
mv "$tmplog" "$changelog_path"

# Run the test to check the consistency of versioning across files
bundle exec ruby -Itest test/pagy_test.rb --name  "/pagy::Version match(#|::)/"

# Optional update of top 100
read -rp 'Do you want to update the "Top 100 contributors"? (y/n)> ' input
if [[ $input = y ]] || [[ $input = Y ]]; then
	bundle exec "$root/scripts/update_top100.rb"
fi

# Optional commit
read -rp 'Do you want to commit the changes? (y/n)> ' input
if [[ $input = y ]] || [[ $input = Y ]]; then
	git add -A
	git commit -m "Version $new_vers"
fi
