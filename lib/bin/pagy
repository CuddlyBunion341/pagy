#!/usr/bin/env ruby
# frozen_string_literal: true

VERSION = '7.0.11'

require 'bundler/inline'
gemfile true do
  source 'https://rubygems.org'
  gem 'rackup'
  gem 'rerun'
  gem 'slop'
end

help = <<~HELP

  Pagy utility to run, create and develop pagy demo apps

  USAGE
    pagy new [demo|repro]
    pagy [demo|repro|**/*.ru] [options]

  Rackup options
    -o, --host      Custom host (default: 0.0.0.0)
    -p, --port      Custom port (default: 8000)

  Rerun options
    -c, --clear     Clear screen before each rerun
        --no-rerun  Disable rerun

  Other options
    -q, --quiet     Quiet mode
    -h, --help      Print this message and exit
    -v, --version   Print the version and exit

  EXAMPLES
    pagy demo       Run the demo app at http://0.0.0.0:8000
    pagy repro      Run the repro app at http://0.0.0.0:8000
    pagy new repro  Create a new repro app at ./repro.ru
    pagy ~/my-repro.ru -o 127.0.0.1 -p 8001
                    Run your app at http://127.0.0.1:8001
HELP

opts = Slop.parse(validate_types: true) do |o|
  o.string  '-o', '--host',    'Custom host', default: '0.0.0.0'
  o.integer '-p', '--port',    'Custom port', default: 8000
  o.bool    '-c', '--clear',   'Clear screen before each rerun', default: false
  o.bool    '-r', '--rerun',   'Enable rerun for **/*.ru', default: true
  o.bool    '-q', '--quiet',   'Quiet mode'
  o.on      '-h', '--help',    'Print this message and exit' do
    puts help
    exit
  end
  o.on      '-v', '--version', 'Print the version and exit' do  # rubocop:disable Layout/SpaceBeforeFirstArg
    puts "Pagy #{VERSION}"
    exit
  end
end

def path(app)
  File.expand_path("../apps/#{app}.ru", __dir__)
end

args = opts.arguments
arg  = args.shift
case arg

when nil
  puts help

when 'new'
  app = args.shift
  case app
  when nil
    warn "\nERROR: Missing argument: demo|repro!\nHelp: pagy -h"
    exit 1

  when 'demo', 'repro'
    path = path(app)
    name = File.basename(path)
    if File.exist?(name)
      print "Do you want to overwrite the '#{name}' file? (y/n)> "
      answer = gets.chomp
      exit unless answer.start_with?(/y/i)
    end

    require 'fileutils'
    FileUtils.cp(path, '.', verbose: true)
  else
    warn "\nERROR: Unknown app: '#{app}'!\nHelp: pagy -h"
    exit 2
  end

else
  if arg.eql?('demo') || arg.eql?('repro')
    opts[:rerun] = false
    opts[:quiet] = true
    path = path(arg)
  else
    path = arg
  end
  unless File.exist?(path)
    warn "\nERROR: App '#{path}' not found!\nHelp: pagy -h"
    exit 3
  end
  rackup = "rackup -I #{File.expand_path('..', __dir__)} -r pagy -o #{opts[:host]} -p #{opts[:port]} #{path}"
  rackup << ' -q' if opts[:quiet]
  if opts[:rerun]
    name = File.basename(path)
    rerun = "rerun --name #{name} -d #{File.dirname(path)} -p #{name}"
    rerun << ' -q' if opts[:quiet]
    rerun << ' -c' if opts[:clear]
    rerun << " -- #{rackup}"
  end
  exec(rerun || rackup)
end
